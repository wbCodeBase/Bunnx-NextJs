# .env.local

# MONGODB_URI=mongodb://localhost:27017/Bunnx
MONGODB_URI=mongodb+srv://devopswb:TITMv8mAgr34ugRV@bunnx.rzpbm.mongodb.net/Bunnx?retryWrites=true&w=majority


// .env.local
#  NEXT_PUBLIC_API_BASE_URL=http://localhost:3000/api

// .env.production
   NEXT_PUBLIC_API_BASE_URL=https://www.bunnx.com/api 


NEXTAUTH_SECRET = "L3dHgLeMnDRe8j8KTY/eQn0DFgxV4nYGvrDIY74u+Dc=" # Added by `npx auth`. Read more: https://cli.authjs.dev

GOOGLE_CLIENT_ID = fthfghfg

GOOGLE_CLIENT_SECRET = fghfghbfhgb  




EMAIL_HOST="smtp.gmail.com"
EMAIL_PORT="587"
EMAIL="devopswb@gmail.com"
EMAIL_PASS="jrec kpam xsob pudf"

























import React, { useState, useEffect } from 'react';


import { motion } from "framer-motion";
import { MessageSquare, Bot, ArrowRight } from "lucide-react";

import { Button } from "@/components/ui/button";

const industries = [
    {
        name: 'Lead Generation', description: 'AI support for lead generation and lead qualification.', icon: MessageSquare,
        color: "indigo", prompt: `You are Bunnx's AI business development representative your name is Syra. Your mission is to understand each user message and convert visitors into qualified leads for our software development services.

SERVICES YOU REPRESENT:
- Website development (B2B, e-commerce, corporate sites)
- Mobile applications (iOS, Android, cross-platform)
- Custom software solutions (ERP, CRM, automation tools)
- UI/UX design and digital transformation
- Cloud solutions and DevOps services

CONVERSATION APPROACH:
1. Quickly identify the visitor's needs from their message
2. Respond with relevant Bunnx expertise and capabilities
3. Ask targeted questions to qualify the lead (project scope, timeline, budget)
4. Address objections with confidence and clear value propositions
5. Guide conversation toward collecting contact information
6. Reply must be concise, conversation should be natural, humanlike or humanized.

RESPONSE GUIDELINES:
- Keep responses under 3 sentences whenever possible
- Highlight Bunnx's relevant experience for their specific project
- Use natural, conversational language while maintaining professionalism
- Always take the next step toward conversion (ask questions, suggest consultation)
- When asked about pricing, emphasize value and ROI before offering a custom quote

LEAD CONVERSION TACTICS:
- For website inquiries: Ask about business goals, target audience, and functionality needs
- For mobile apps: Inquire about platforms, core features, and user base
- For custom software: Explore pain points, integration requirements, and scaling needs
- Always close by requesting contact details or offering to schedule a discovery call

Remember past messages in the conversation to provide continuity and build rapport. Treat each interaction as part of a single flowing conversation toward project commitment.

Important: Collect the following information from the user during the chat:

Full Name
Phone Number
Email Address (optional)
Summary of the conversation about their project (automatically captured)

Once all the required information from name to budget and expected timeline is gathered, save the details in a MongoDB database using the MongoDB node/tool.

if budget and expected timeline is not confirm and not exist in conversation save contact details and conversation summary only after conversation end, with their respective datatype.

Only one document should be created per phone number per session.

If the same phone number is entered again within the same session, do not create a new document.

Additional Notes:
Ensure that each piece of information is validated (e.g., valid phone format, optional email).

Automatically summarise the conversation about the user's project.

Return a proper JSON object — not a string — like this (not inside quotes!):

{
"name": "abhishek kashyap",
"phone": "9638527411",
"email": "xyz@gmail.com",
"project_summary": "User is interested in a software development project with a budget of 2.5 Lakh and a timeline of 4 weeks."
} `,
    },
   {
    name: 'Healthcare',
    description: 'AI assistant for medical support and patient queries.',
    icon: MessageSquare,
    color: "purple",
    prompt: "You are an AI assistant specialized in healthcare. You can provide medical information, answer patient queries, and assist with healthcare-related tasks.",
  },
  {
    name: 'Education',
    description: 'AI tutor for students and educators.',
    icon: MessageSquare,
    color: "green",
    prompt: "You are an AI assistant specialized in education. You can tutor students, answer questions on various subjects, and provide study guidance.",
  },
  {
    name: 'Finance',
    description: 'AI assistant for financial advice and queries.',
    icon: MessageSquare,
    color: "cyan",
    prompt: "You are an AI assistant specialized in finance. You can help with budgeting, investment advice, and general financial queries.",
  },
];

export const IndustrySelector = ({ onSelect }) => {
    return (
        // <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        //     {industries.map((industry) => (
        //         <button
        //             key={industry.name}
        //             onClick={() => onSelect(industry.name)}
        //             className="p-4 border rounded-lg shadow hover:shadow-md transition"
        //         >
        //             <div className="text-3xl mb-2">{industry.icon}</div>
        //             <h3 className="text-xl font-semibold">{industry.name}</h3>
        //             <p className="text-gray-600">{industry.description}</p>
        //         </button>
        //     ))}
        // </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 justify-center gap-4">
            {industries.map(({ name, description, icon: Icon, color }, idx) => (
                <motion.div
                    key={name}
                    onClick={() => onSelect(name)}
                    initial={{ opacity: 0, y: 30 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{ duration: 0.5, delay: idx * 0.1 }}
                    className="group relative cursor-pointer"
                    whileHover={{ y: -8, transition: { duration: 0.2 } }}
                >
                    <div
                        className={`absolute inset-0 bg-gradient-to-r from-${color}-600/20 to-${color}-600/0 opacity-0 group-hover:opacity-100 rounded-xl transition-opacity duration-300`}
                    ></div>
                    <div
                        className={`relative overflow-hidden rounded-xl border border-${color}-100 bg-gradient-to-b from-${color}-50 to-white shadow-sm group-hover:shadow-md transition-shadow duration-300`}
                    >
                        <div className="p-6">
                            <div
                                className={`w-12 h-12 bg-white rounded-full shadow-md flex items-center justify-center text-${color}-600 mb-4`}
                            >
                                <Icon className="h-6 w-6" />
                            </div>
                            <h3 className="text-xl font-bold text-gray-900 mb-2">{name}</h3>
                            <p className="text-gray-600 text-sm mb-4">{description}</p>


                            <div className="pt-2">
                                <div
                                    className={`flex items-center text-${color}-600 font-semibold w-28 p-1`}
                                >
                                    <span className="text-sm">Try</span>
                                    <ArrowRight className="ml-1 h-4 w-4 transition-transform group-hover:translate-x-1" />
                                </div>
                            </div>
                        </div>
                    </div>
                </motion.div>
            ))}
        </div>

    );
};


// Handle sending a message
// const handleSendMessage = () => {
//     if (userInput.trim() === "") return;

//     // Add user message
//     const newMessages = [...messages, { sender: "user", text: userInput }];
//     setMessages(newMessages);
//     setUserInput("");

//     // Simulate AI response after a short delay
//     setTimeout(() => {
//         // Get a response based on conversation length
//         const responseIndex = Math.min(newMessages.filter(m => m.sender === "user").length - 1, demoResponses.length - 1);
//         setMessages([
//             ...newMessages,
//             { sender: "ai", text: demoResponses[responseIndex] }
//         ]);
//     }, 1000);
// };


// Handle Enter key press
// const handleKeyPress = (e) => {
//     if (e.key === "Enter") {
//         handleSendMessage();
//     }
// };

const Chatbot = ({ industry }) => {

    const [chatActive, setChatActive] = useState(false);

    const [messages, setMessages] = useState([ ]);
    // const [messages, setMessages] = useState([
    //     { role: 'system', content: `You are an AI assistant specialized in ${industry}.` },
    // ]);

    const [userInput, setUserInput] = useState('');
    const [loading, setLoading] = useState(false);


      useEffect(() => {
    // Find matching industry
    const selectedIndustry = industries.find(
      (industry) => industry.name === industry
    );

    if (selectedIndustry) {
      // Set the first system message with the correct prompt
      setMessages([
        { role: 'system', content: selectedIndustry.prompt },
        // Optional: Add user message or assistant greeting if needed
      ]);
    }
  }, [industry]);


    const sendMessage = async () => {
        if (!userInput.trim()) return;

        const newMessages = [...messages, { role: 'user', content: userInput }];
        setMessages(newMessages);
        setUserInput('');
        setLoading(true);

        try {
            const response = await fetch('/api/chatbot', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ messages: newMessages }),
            });

            const data = await response.json();
            setMessages([...newMessages, { role: 'assistant', content: data.reply }]);
        } catch (error) {
            console.error('Error:', error);
        } finally {
            setLoading(false);
        }
    };


    return (
        // <div className="p-4 border rounded-lg shadow">
        //     <div className="h-64 overflow-y-auto mb-4">
        //         {messages
        //             .filter((msg) => msg.role !== 'system')
        //             .map((msg, index) => (
        //                 <div key={index} className={`mb-2 ${msg.role === 'user' ? 'text-right' : 'text-left'}`}>
        //                     <span
        //                         className={`inline-block px-4 py-2 rounded ${msg.role === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'
        //                             }`}
        //                     >
        //                         {msg.content}
        //                     </span>
        //                 </div>
        //             ))}
        //         {loading && <div className="text-gray-500">Typing...</div>}
        //     </div>
        //     <div className="flex">
        //         <input
        //             type="text"
        //             value={userInput}
        //             onChange={(e) => setUserInput(e.target.value)}
        //             onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
        //             className="flex-grow border rounded-l px-4 py-2"
        //             placeholder="Type your message..."
        //         />
        //         <button
        //             onClick={sendMessage}
        //             className="bg-blue-500 text-white px-4 py-2 rounded-r hover:bg-blue-600"
        //         >
        //             Send
        //         </button>
        //     </div>
        // </div>

        <motion.div
            className="w-full lg:w1/2"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
        >
            <div className="bg-white rounded-xl shadow-md overflow-hidden border border-gray-100 max-w-md mx-auto">

                <div className="bg-gradient-to-r from-cyan-500 to-blue-600 text-white p-4">
                    <div className="flex items-center">
                        <Bot className="h-6 w-6 mr-2" />
                        <div>
                            <h3 className="font-semibold">WeOne Chat Assistant</h3>
                            <div className="flex items-center text-xs">
                                <div className="w-2 h-2 rounded-full bg-green-400 mr-1"></div>
                                Online
                            </div>
                        </div>
                    </div>
                </div>

                <div className="h-96 overflow-y-auto p-4 bg-gray-50">
                    {chatActive ? (
                        <div className="space-y-4">
                            <div className="flex">
                                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-cyan-500 to-blue-600 flex-shrink-0 flex items-center justify-center mr-2">
                                    <Bot className="h-4 w-4 text-white" />
                                </div>
                                <div className="bg-white p-3 rounded-lg shadow-sm max-w-[80%]">
                                    <p className="text-sm text-gray-700">
                                        Hi there! I'm the WeOne AI Assistant. How can I help you today?
                                    </p>
                                </div>
                            </div>

                            {messages
                                .filter((message) => message.role !== 'system')
                                .map((message, index) => (
                                    // <div key={index} className={`mb-2 ${message.role === 'user' ? 'text-right' : 'text-left'}`}>
                                    //     <span
                                    //         className={`inline-block px-4 py-2 rounded ${message.role === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'
                                    //             }`}
                                    //     >
                                    //         {message.content}
                                    //     </span>
                                    // </div>

                                    <motion.div
                                        key={index}
                                        className={`flex ${message.role === 'user' ? 'justify-end' : ''}`}
                                        initial={{ opacity: 0, y: 10 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        transition={{ duration: 0.3 }}
                                    >
                                        {message.role !== 'user' && (
                                            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-cyan-500 to-blue-600 flex-shrink-0 flex items-center justify-center mr-2">
                                                <Bot className="h-4 w-4 text-white" />
                                            </div>
                                        )}

                                        <div className={`p-3 rounded-lg shadow-sm max-w-[80%] ${message.role === 'user'
                                            ? 'bg-cyan-500 text-white ml-2'
                                            : 'bg-white text-gray-700'
                                            }`}>
                                            <p className="text-sm">{message.content}</p>
                                        </div>

                                        {message.role === 'user' && (
                                            <div className="w-8 h-8 rounded-full bg-cyan-100 flex-shrink-0 flex items-center justify-center ml-2">
                                                <MessageSquare className="h-4 w-4 text-cyan-600" />
                                            </div>
                                        )}
                                    </motion.div>

                                ))}

                            {loading && <div className="text-gray-500">Typing...</div>}


                            {/* {messages.map((message, index) => (
                                <motion.div
                                    key={index}
                                    className={`flex ${message.sender === 'user' ? 'justify-end' : ''}`}
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ duration: 0.3 }}
                                >
                                    {message.sender === 'ai' && (
                                        <div className="w-8 h-8 rounded-full bg-gradient-to-r from-cyan-500 to-blue-600 flex-shrink-0 flex items-center justify-center mr-2">
                                            <Bot className="h-4 w-4 text-white" />
                                        </div>
                                    )}

                                    <div className={`p-3 rounded-lg shadow-sm max-w-[80%] ${message.sender === 'user'
                                        ? 'bg-cyan-500 text-white ml-2'
                                        : 'bg-white text-gray-700'
                                        }`}>
                                        <p className="text-sm">{message.text}</p>
                                    </div>

                                    {message.sender === 'user' && (
                                        <div className="w-8 h-8 rounded-full bg-cyan-100 flex-shrink-0 flex items-center justify-center ml-2">
                                            <MessageSquare className="h-4 w-4 text-cyan-600" />
                                        </div>
                                    )}
                                </motion.div>
                            ))} */}

                            {messages.length > 0 && messages[messages.length - 1].sender === 'user' && (
                                <div className="flex">
                                    <div className="w-8 h-8 rounded-full bg-gradient-to-r from-cyan-500 to-blue-600 flex-shrink-0 flex items-center justify-center mr-2">
                                        <Bot className="h-4 w-4 text-white" />
                                    </div>
                                    <div className="bg-white p-3 rounded-lg shadow-sm">
                                        <div className="flex space-x-1">
                                            <motion.div
                                                className="w-2 h-2 rounded-full bg-cyan-400"
                                                animate={{ y: [0, -3, 0] }}
                                                transition={{ duration: 0.6, repeat: Infinity }}
                                            />
                                            <motion.div
                                                className="w-2 h-2 rounded-full bg-cyan-400"
                                                animate={{ y: [0, -3, 0] }}
                                                transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                                            />
                                            <motion.div
                                                className="w-2 h-2 rounded-full bg-cyan-400"
                                                animate={{ y: [0, -3, 0] }}
                                                transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}
                                            />
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    ) : (
                        <div className="h-full flex flex-col items-center justify-center">
                            <div className="w-16 h-16 bg-cyan-100 rounded-full flex items-center justify-center mb-4">
                                <MessageSquare className="h-7 w-7 text-cyan-600" />
                            </div>
                            <h3 className="text-lg font-semibold text-gray-800 mb-2">Start a Conversation</h3>
                            <p className="text-gray-600 text-center mb-4">Click the button below to try our AI chat assistant.</p>
                            <Button
                                className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-400 hover:to-blue-500 text-white"
                                onClick={() => setChatActive(true)}
                            >
                                Start Demo
                            </Button>
                        </div>
                    )}
                </div>

                {chatActive && (
                    <div className="p-4 border-t border-gray-100">
                        <div className="flex">
                            <input
                                type="text"
                                value={userInput}
                                onChange={(e) => setUserInput(e.target.value)}
                                onKeyDown={(e) => e.key === 'Enter' && sendMessage()}

                                // type="text"
                                // value={userInput}
                                // onChange={(e) => setUserInput(e.target.value)}
                                // onKeyPress={handleKeyPress}
                                placeholder="Type your message..."
                                className="flex-grow rounded-l-lg border border-gray-200 p-3 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                            />
                            <button
                                // onClick={handleSendMessage}
                                onClick={sendMessage}
                                className="bg-gradient-to-r from-cyan-500 to-blue-600 text-white p-3 rounded-r-lg"
                            >
                                <ArrowRight className="h-5 w-5" />
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </motion.div>


    );
};

export default Chatbot;
